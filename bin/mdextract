#!/usr/bin/env node
// vim:ft=javascript

var
  fs = require('fs'),
  nopt = require('nopt'),
  mdextract = require('../index'),
  opts = {
    internal: Boolean,
    json: Boolean,
    update: Boolean,
    help: Boolean,
    version: Boolean,
    'show-code': Boolean
  },
  short = {
    u: '--update',
    h: '--help',
    v: '--version'
  },
  argv = nopt(opts, short, process.argv),
  mdOpts = { showInternal: argv.internal, showCode: argv['show-code'], lang: 'js' },
  fname = argv.argv.remain[0],
  doc;

if (argv.help) {
  console.log('Usage:');
  console.log('  mdextract <input.js> [options]');
  console.log('');
  console.log('Options:');
  console.log('      --internal       include internal/private APIs');
  console.log('      --json           prints a json representation');
  console.log('      --show-code      prints code too');
  console.log('  -u, --update FILE    updates a markdown document in place');
  console.log('  -h, --help           show usage information');
  console.log('  -v, --version        print version');
  process.exit();
}

if (argv.version) {
  console.log('v' + require('../package.json').version);
  process.exit();
}

readInput(fname, function (err, data) {
  if (argv.json) {
    doc = mdextract(data, { lang: mdOpts.lang });
    console.log(JSON.stringify(doc, null, 2));
  } else if (argv.update) {
    data = updateFile(data);
    if (fname)
      fs.writeFileSync(fname, data, 'utf-8');
    else
      console.log(data);
  } else {
    doc = mdextract(data);
    console.log(doc.toMarkdown(mdOpts));
  }
});

function readInput (fname, fn) {
  if (fname)
    fs.readFile(fname, 'utf-8', fn);
  else
    readStdin(fn);
}

function readStdin (fn) {
  process.stdin.resume(); /* paused by default */
  process.stdin.setEncoding('utf8');

  var data = '';
  process.stdin.on('data', function(chunk) { data += chunk.toString(); });
  process.stdin.on('end', function() { fn(null, data); });
}

function updateFile (data) {
  data = data.replace(/(<!-- include: (.*?) -->)[\s\S]*(<!-- \/include(?:: (\2))? -->)/g, function (_, open, fname, close) {
    var doc = mdextract(fs.readFileSync(fname, 'utf-8'));
    return [
      open,
      "",
      doc.toMarkdown(mdOpts),
      "",
      close
    ].join("\n");
  });

  return data;
}
